#!/usr/bin/python
"""
ruler - A character-based ruler to gauge column width in terminals or editors.
----.----1----.----2----.----3----.----4----.----5----.----6----.----7----.---_
"""
import termios
import fcntl
import struct
import sys
import argparse
# The module `argparse` replaced `OptionParser` in Python 2.7,
# RHEL6 has Python 2.6 stock, with 2.7 in add-on packages.

def term_size():
    """
    Return a tuple about character dimensions of the terminal.
    """
    term_dim = struct.pack("HHHH", 0, 0, 0, 0)
    fd_stdout = sys.stdout.fileno()
    try:
        win_dim = fcntl.ioctl(fd_stdout, termios.TIOCGWINSZ, term_dim)
        (rows, cols) = struct.unpack("HHHH", win_dim)[:2]
    except IOError:
        # Exception if there is no terminal, say if launched from Vim.
        # Pretend we have MS-DOS or VT100 resolution.
        (rows, cols) = (24, 80)
    return (rows, cols)


def ruler(whitespace_length=0, ruler_length=80, begin_number=0, truncate_length=term_size()[1]):
    """
    Return a ruler with a set character limit, like 140 for "Twitter.com".

    Replace '-8-' with '_8_' to hint at 'classic' typewritter page width.
    Extend decimal with alphabet and zero for long rulers.  Use uppercase letters
    to indicate classic tweet length.  a 10, b 11, c 12, d, 13, e 14, F 15, G 16,
    etc.
    """
    # rnine = '----.----'
    #rnine = '-_-_._-_-'
    #rnine = '-+-+.+-+-'
    #rnine = '- - . - -'
    rnine = '- - _ - -'
    output = ''

    # Build ruler with `rnine` sections matched with appropriate tens value.
    base35 = '123456789abcdeFGHIJKLMNOPQRSTUVWXYZABCDEfghijklmnopqrstuvwxyz0'
    end = ruler_length/10
    for i in base35[:end]:
        output = "%s%s%s" % (output, rnine, i)
    # Trim start of ruler until beginning number reached.
    output = output[begin_number:]
    # Add the remaining ruler characters for ruler length.
    end = ruler_length % 10
    output = output + rnine[:end]

    # Underscore neighbors for 80th column.
    # Do a partial substitution for a ruler with 79 or 80 characters.
    busted_string = list(output)
    special_column_char = "|";
    if len(busted_string) > 78:
        busted_string[78] = special_column_char
    if len(busted_string) > 80:
        busted_string[80] = special_column_char
    output = ''.join(busted_string)

    # Add whitespace up front, then truncate to terminal width.
    output = '{0}{1:<}'.format(' ' *  int(whitespace_length), output)
    fmt = "%%-%ds" % (truncate_length - begin_number)
    output = fmt % output
    output = output[:truncate_length]

    # Change trailing space to visible character for glancing readability
    """
    ./ruler -l 8; ./ruler -l 9; ./ruler -l 10
    - - _ -.
    - - _ - -
    - - _ - -1
    """
    if output[-1] == ' ':
        output = output[:-1] + '.'
    return output

def main(argv=None):
    """
    Parse args and print help text, a ruler or terminal dimenstions
    """
    if argv is None:
        argv = sys.argv
    parser = argparse.ArgumentParser(
        description='Make a ruler of characters; terminal width is default')
    parser.add_argument(
        '-i', '--info',
        help='Return terminal height and width; also available from command `stty size`',
        action='store_true')
    parser.add_argument(
        '-o', '--offset',
        help='Use spaces to offset the ruler start',
        default=0,
        type=int)
    parser.add_argument(
        '-b', '--begin',
        help='Begin counting at this number',
        default=0,
        type=int)
    parser.add_argument(
        '-l', '--length',
        help='Length of ruler in characters',
        default=term_size()[1],
        type=int)
    args = parser.parse_args()

    if args.info:
        # Info for terminal dimensions; returns rows and columns
        print(term_size())
        exit()
    else:
        # Print a ruler.
        print(ruler(
            whitespace_length=int(args.offset),
            ruler_length=int(args.length),
            begin_number=int(args.begin),
            truncate_length=int(args.length)))
if __name__ == "__main__":
    main()
