#!/usr/bin/python
"""
ruler - A 140 chacter ruler to help gauge 80 char terminal width or editing.
----.----1----.----2----.----3----.----4----.----5----.----6----.----7----.---_8
"""

import termios, fcntl, struct, sys                                                            
from optparse import OptionParser
# OptionParser is new in 2.3, deprecated in 2.7 and replaced with argparse
# No ETA for removal of optparse
# http://www.python.org/dev/peps/pep-0389/
# sl6 has 2.6, *sigh* wait for sl7 to use argparse, or use the non-deprecated getopt
# http://docs.python.org/2/library/getopt.html
# http://uberpython.wordpress.com/2009/09/28/standard-library-granularity-in-python-argparse-vs-getopt/
# That last post points out the utility of readable code, and makes me think argparse should
# be good for another decade, while getopts is painful.
#
# Hey, argparse is in RHEL5, so let us use it.
def term_size():                                                                               
    """
    Return a tuple about character and pixel size of the terminal.
    """
    term_dim = struct.pack("HHHH", 0, 0, 0, 0)
    fd_stdout = sys.stdout.fileno()
    try:
        win_dim = fcntl.ioctl(fd_stdout, termios.TIOCGWINSZ, term_dim)
        (rows, cols ) = struct.unpack("HHHH", win_dim)[:2]
    except IOError:
        # No terminal, say if launched in a subshell from Vim.
        # Pretend we have MS-DOS or VT100 resolution.
        (rows, cols ) = (24, 80)
    return (rows, cols)

def ruler( whitespace_length=0, ruler_length=80):
    """
    Ruler with a set character limit, like 140 for "Twitter.com".
    Up to three args for whitespace, ruler, and truncation lengths.
    Truncation would be set for the terminal width to avoid line wraps.
	ruler
        ruler whitespace_length
        ruler whitespace_length ruler_length
        #ruler whitespace_length ruler_length truncate_length 

    A 10, B 11, C 12, D, 13, E 14, F 15, G 16
    """
    # FIXME add test conditions
    # http://wiki.python.org/moin/PythonTestingToolsTaxonomy
    truncate_length = term_size()[1]

    #print "%s %s %s" % (whitespace_length, ruler_length, truncate_length)

    rnine = '----.----'
    output = ''

    # Build ruler with rnine sections matched with appropriate Tens value
    base35 = '123456789abcdeFGHIJKLMNOPQRSTUVWXYZ0'
    end = ruler_length/10
    for i in base35[:end]:
        output = "%s%s%s" % (output, rnine, i)
    # Add the remaining ruler characters for ruler length
    end = ruler_length % 10
    output = output + rnine[:end]

    # Replace '-8-' with '_8_' to hint at 'classic' typewritter page width
    # Need the partial substitution for a ruler for 79 or 80
    # NAIVE: output = output.replace('-8-', '_8_')
    busted_string = list(output)
    if len(busted_string) > 78:
        busted_string[78] = '_' 
    if len(busted_string) > 80:
        busted_string[80] = '_'
    output = ''.join(busted_string)

    # Add whitespace up front, then truncate to terminal width.
    output = '{0}{1:<}'.format( ' ' *  int(whitespace_length), output)
    fmt = "%%-%ds" % truncate_length
    output = fmt % output
    output = output[:truncate_length]
    return output

if __name__ == "__main__":
    PARSER = OptionParser()
    (OPTIONS, ARGS) = PARSER.parse_args()
    # FIXME add -i for info about terminal size info: rows and columns
    # FIXME avoid positional args, use short/long options o/offset l/length
    if len(ARGS) > 0:
        if len(ARGS) > 1:
            print ruler(int(ARGS[0]), int(ARGS[1]))
        else:
            print ruler(int(ARGS[0]))
    else:
	# Emit a ruler to fit the terminal
        print ruler(0, term_size()[1] )
