#!/usr/bin/python
"""
ruler - A character-based ruler to gauge column width in terminals or editors.
----.----1----.----2----.----3----.----4----.----5----.----6----.----7----.---_8
"""

import termios, fcntl, struct, sys
import argparse
# OptionParser is new in 2.3, deprecated in 2.7, argparse is new in 2.7,
# RHEL6 has 2.6 stock, 2.7 in extras.
def term_size():
    """
    Return a tuple about character and pixel size of the terminal.
    """
    term_dim = struct.pack("HHHH", 0, 0, 0, 0)
    fd_stdout = sys.stdout.fileno()
    try:
        win_dim = fcntl.ioctl(fd_stdout, termios.TIOCGWINSZ, term_dim)
        (rows, cols) = struct.unpack("HHHH", win_dim)[:2]
    except IOError:
        # No terminal, say if launched in a subshell from Vim.
        # Pretend we have MS-DOS or VT100 resolution.
        (rows, cols) = (24, 80)
    return (rows, cols)

def ruler(whitespace_length=0, ruler_length=80):
    """
    Ruler with a set character limit, like 140 for "Twitter.com".
    Up to three args for whitespace, ruler, and truncation lengths.
    Truncation would be set for the terminal width to avoid line wraps.
	ruler
        ruler whitespace_length
        ruler whitespace_length ruler_length
        #ruler whitespace_length ruler_length truncate_length

    A 10, B 11, C 12, D, 13, E 14, F 15, G 16
    """
    truncate_length = term_size()[1]

    #print "%s %s %s" % (whitespace_length, ruler_length, truncate_length)

    rnine = '----.----'
    output = ''

    # Build ruler with rnine sections matched with appropriate Tens value.
    # Note the uppercase letters to indicate classic tweet length
    base35 = '123456789abcdeFGHIJKLMNOPQRSTUVWXYZ0'
    end = ruler_length/10
    for i in base35[:end]:
        output = "%s%s%s" % (output, rnine, i)
    # Add the remaining ruler characters for ruler length
    end = ruler_length % 10
    output = output + rnine[:end]

    # Replace '-8-' with '_8_' to hint at 'classic' typewritter page width.
    # Need the partial substitution for a ruler for 79 or 80
    # NAIVE: output = output.replace('-8-', '_8_')
    busted_string = list(output)
    if len(busted_string) > 78:
        busted_string[78] = '_'
    if len(busted_string) > 80:
        busted_string[80] = '_'
    output = ''.join(busted_string)

    # Add whitespace up front, then truncate to terminal width.
    output = '{0}{1:<}'.format(' ' *  int(whitespace_length), output)
    fmt = "%%-%ds" % truncate_length
    output = fmt % output
    output = output[:truncate_length]
    return output

if __name__ == "__main__":
    PARSER = argparse.ArgumentParser(
        description='Make a ruler of characters; terminal width is default')
    PARSER.add_argument('-i', '--info',
                     help='Show info about terminal height and width',
                     action='store_true')
    PARSER.add_argument('-o', '--offset',
                     help='Use spaces to offset the ruler start',
                     default=0,
                     type=int)
    PARSER.add_argument('-l', '--length',
                     help='Length of ruler in characters',
                     default=term_size()[1],
                     type=int)
    ARGS = PARSER.parse_args()
    # Info for terminal dimensions; returns rows and columns
    if ARGS.info:
        print(term_size())
        exit()
    else:
        print(ruler(int(ARGS.offset), int(ARGS.length)))
